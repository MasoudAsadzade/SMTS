/* Basics */

html {
    --size-padding: 15px;
    --size-border: 1px;

    --color-background: #BDC3C7;

    /* Grey */
    --color-primary-light:  #D3D3D3; /* Container borders */
    --color-primary-medium: #EEEEEE; /* Canvas background */
    --color-primary-dark:   #808080; /* Tables borders */

    /* Green */
    /*--color-secondary-light: #7CFC00; !* Highlights *!*/
    /*--color-secondary-dark:  #00cc00; !* Tables headers *!*/

    /* Blue */
    --color-secondary-light: #B1EED9; /* Highlights */
    --color-secondary-dark:  #52BCCC; /* Tables headers */

    /* Mode visibility */
    --visibility-mode-database: none;
    --visibility-mode-server:   none;
}

html, body {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
}


/* Modes */

/* Classes to be used to hide/show the correct elements depending on which mode
 * (database or live) is selected. However, since the `revert` keyword is not
 * yet implemented in CSS, this cannot be done, since it is impossible to
 * restore an element property to its previous cascading value. For more info:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/revert
 */

/*.smts-show-on-mode-database {
    display: var( --visibility-mode-database) !important;
}*/

/*.smts-show-on-mode-live {
    display: var( --visibility-mode-server) !important;
}*/


/* Tables */

.smts-table {
    width: 100%;
    font-size: 0.8em;

    word-break: break-all;
    word-wrap: break-word;
    overflow-wrap: break-word;

    box-sizing: border-box;
}

.smts-table, .smts-table th, .smts-table tr, .smts-table td  {
    padding: 5px;
    border: 1px solid var(--color-primary-dark);
    border-collapse: collapse;
}

.smts-table th {
    background-color: var(--color-secondary-dark);
}

.smts-table td {
    min-width: 40px;
}

.smts-table-interactive tr:hover {
    cursor: pointer;
    background: var(--color-background);
}


/* Containers */

.smts-container {
    display: flex;
    flex-flow: column;
    overflow: auto;
}

.smts-table-container {
    flex-grow: 1;
    overflow: auto;
}

.smts-container-title {
    padding: var(--size-padding) 0;
    font-weight: bold;
    text-transform: uppercase;
}

.smts-container-subtitle {
    font-weight: bold;
}

.smts-container-horizontal {
    display: flex;
    justify-content: center;
    margin-bottom: var(--size-padding);
}

.smts-container-horizontal > * {
    margin: 0 10px;
}

.smts-container-form {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

.smts-container-form > .btn {
    width: 35%;
}

.smts-container-form > .smts-message {
    padding: 6px 12px;
    border: 1px solid #adadad;
    flex-basis: 100%;
    text-align: center;
    word-break: break-all;
}

.smts-container-form > * {
    margin: 0 var(--size-padding) var(--size-padding) var(--size-padding) !important;
}

/* Navbar */

.smts-navbar {
    margin-bottom: var(--size-padding) !important;
}

.smts-navbar > li > a {
    padding: 5px 15px !important;
}


/* Input */
/* For better styling, <input type="file"> Should be wrapped around a label */
/*  element, making the actual input element invisible. E.g.:               */
/* <label class="btn btn-default"><input type="file">Browse</label>         */
.btn-browse > input[type="file"] {
    display: none !important;
}


/* Bootstrap fixes */

.checkbox {
    margin-top: 0 !important;
}


/* Other */

.smts-highlight {
    background-color: var(--color-secondary-light);
}

.smts-hidden {
    display: none !important;
}

.smts-invisible {
    visibility: hidden;
}

.smts-bold {
    font-weight: bold;
}

.smts-monospace {
    font-family: monospace;
}


/* Views */

#smts-main {
    margin: 0;
    padding: 0;
    height: 100%;
}

#smts-menu {
    border-right: var(--size-border) solid var(--color-primary-light);
}

#smts-content {
    height: 100%;
    display: flex;
    flex-direction: column;
}

#smts-content-navbar {
    margin-top: var(--size-padding);
    margin-bottom: 0 !important;
}

#smts-content-tab-content {
    flex: 1;
    position: relative;
}

/* The absolute positioning is a fix to make these elements height 100% of the
 * parent `#smts-content-tab-content`, since Chrome and Safari don't recognize
 * the height of a parent with the `flex: 1` property. For more, see
 * https://stackoverflow.com/questions/33636796/chrome-safari-not-filling-100-height-of-flex-parent#33644245
 */
#smts-content-instance, #smts-content-cnf {
    position: absolute;
    height: 100%;
    width: 100%;
}

#smts-content-instance-data {
    height: 90%;
    padding: var(--size-padding) 0;
}

#smts-content-instance-data-left {
    height: 100%;
    border-right: var(--size-border) solid var(--color-primary-light);
}

#smts-content-instance-data-right {
    height: 100%;
}

#smts-content-instance-timeline {
    height: 10%;
    margin: 0;
    border-top: var(--size-border) solid var(--color-primary-light);
}

#smts-content-cnf {
    padding: var(--size-padding) 0;
}

#smts-content-cnf-container {
    height: 100%;
    border: var(--size-border) solid var(--color-secondary-dark);
    background-color: var(--color-primary-medium);
}


/* Responsiveness */

@media screen and (max-width: 768px) { /* Pixels based on Bootstrap col-sm */

    #smts-views, #smts-title, .smts-container, .smts-navbar > li > a {
        height: auto !important;
    }

    #smts-title, .smts-table-container {
        max-height: 200px;
    }

    #smts-timeline {
        height: 100px;
    }

    #smts-tree-container {
        max-height: none !important;
        height: 400px !important;
    }

}